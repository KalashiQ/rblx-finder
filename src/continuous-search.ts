import pLimit from 'p-limit';
import pino from 'pino';
import { config } from './config';
import { upsertGameWithStatus, getGameCount } from './db';
import { fetchGamesByLetter, fetchGamesByLetterPage } from './rotrends';
import { closeBrowser } from './browser';
import TelegramBot from 'node-telegram-bot-api';

const logger = pino({ 
  level: 'info',
  transport: {
    target: 'pino-pretty',
    options: {
      colorize: true,
      translateTime: 'HH:MM:ss',
      ignore: 'pid,hostname'
    }
  }
});

// –¢–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä—É—Å—Å–∫–∏—Ö –∏–≥—Ä
const LETTERS = [
  '–∞','–±','–≤','–≥','–¥','–µ','–∂','–∑','–∏','–π','–∫','–ª','–º','–Ω','–æ','–ø','—Ä','—Å','—Ç','—É','—Ñ','—Ö','—Ü','—á','—à','—â','—ä','—ã','—å','—ç','—é','—è'
];

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
let isContinuousSearchRunning = false;
let continuousSearchInterval: NodeJS.Timeout | null = null;
let nextCycleTimeout: NodeJS.Timeout | null = null; // –¢–∞–π–º–µ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
let botInstance: TelegramBot | null = null;
let allChatIds: Set<number> = new Set(); // –í—Å–µ —á–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–≥–¥–∞-–ª–∏–±–æ –ø–∏—Å–∞–ª–∏ –±–æ—Ç—É
let isStarting = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤

export function setBotInstance(bot: TelegramBot) {
  botInstance = bot;
}

export function addChatId(chatId: number) {
  allChatIds.add(chatId);
}

export function isContinuousSearchActive(): boolean {
  return isContinuousSearchRunning;
}

export function startContinuousSearch(): void {
  if (isContinuousSearchRunning || isStarting) {
    logger.warn('Continuous search is already running or starting');
    return;
  }

  isStarting = true;
  isContinuousSearchRunning = true;
  logger.info('üöÄ Starting continuous search with 5-minute intervals');
  logger.info('üìã Search pattern: –ê ‚Üí –ë ‚Üí –í ‚Üí ... ‚Üí –Ø ‚Üí (wait 5 min) ‚Üí –ê ‚Üí –ë ‚Üí –í ‚Üí ...');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–∏—Å–∫ —Å—Ä–∞–∑—É
  performContinuousSearchWithDelay();
  
  isStarting = false;
}

export function stopContinuousSearch(): void {
  if (!isContinuousSearchRunning) {
    logger.warn('Continuous search is not running');
    return;
  }

  isContinuousSearchRunning = false;
  
  // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
  if (continuousSearchInterval) {
    clearInterval(continuousSearchInterval);
    continuousSearchInterval = null;
  }
  
  if (nextCycleTimeout) {
    clearTimeout(nextCycleTimeout);
    nextCycleTimeout = null;
  }
  
  logger.info('‚èπÔ∏è Continuous search stopped');
}

async function performContinuousSearchWithDelay(): Promise<void> {
  if (!isContinuousSearchRunning) {
    logger.info('üõë Continuous search was stopped, skipping cycle');
    return;
  }

  // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
  await performContinuousSearch();
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
  if (!isContinuousSearchRunning) {
    logger.info('üõë Continuous search was stopped after cycle completion');
    return;
  }
  
  // –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
  logger.info('‚è∞ Planning next cycle in 5 minutes...');
  nextCycleTimeout = setTimeout(() => {
    if (isContinuousSearchRunning) {
      performContinuousSearchWithDelay();
    } else {
      logger.info('üõë Continuous search was stopped, canceling next cycle');
    }
  }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
}

async function performContinuousSearch(): Promise<void> {
  if (!isContinuousSearchRunning) {
    return;
  }

  logger.info('üîÑ Starting continuous search cycle - processing all letters from –ê to –Ø');
  
  let totalGames = 0;
  let newGames = 0;
  let updatedGames = 0;
  let errors = 0;
  const newGamesList: Array<{title: string, url: string}> = [];
  
  const limit = pLimit(config.CONCURRENCY);
  
  try {
    // –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ –±—É–∫–≤–∞–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ—Ç –ê –¥–æ –Ø
    for (let i = 0; i < LETTERS.length; i++) {
      const letter = LETTERS[i];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø–æ–∏—Å–∫
      if (!isContinuousSearchRunning) {
        logger.info('Continuous search was stopped during execution');
        break;
      }
      
      logger.info(`üìù Processing letter "${letter}" (${i + 1}/${LETTERS.length})`);
      
      try {
        let page = 1;
        let letterGames = 0;
        let letterNewGames = 0;
        
        let emptyPagesCount = 0;
        const maxEmptyPages = 3; // –ú–∞–∫—Å–∏–º—É–º 3 –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥—Ä—è–¥
        
        for (;;) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø–æ–∏—Å–∫
          if (!isContinuousSearchRunning) {
            logger.info('Continuous search was stopped during execution');
            break;
          }
          
          logger.info(`üìÑ Processing page ${page} for letter "${letter}"`);
          
          let pageGames: any[] = [];
          try {
            pageGames = page === 1 ? await fetchGamesByLetter(letter, 100) : await fetchGamesByLetterPage(letter, page, 100);
            logger.info({ letter, page, count: pageGames.length }, '‚úÖ Page parsed successfully');
          } catch (error) {
            logger.error({ letter, page, error: (error as Error).message }, '‚ùå Page parsing failed');
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
            pageGames = [];
          }
          
          if (!pageGames.length) {
            emptyPagesCount++;
            logger.warn(`‚ö†Ô∏è Empty page ${page} for letter "${letter}" (${emptyPagesCount}/${maxEmptyPages})`);
            
            if (emptyPagesCount >= maxEmptyPages) {
              logger.info(`üõë Stopping pagination for letter "${letter}" after ${maxEmptyPages} empty pages`);
              break;
            }
            
            page++;
            continue;
          }
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ
          emptyPagesCount = 0;
          
          letterGames += pageGames.length;
          totalGames += pageGames.length;
          
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–∞–π—Ç
          if (page > 1) {
            await new Promise(resolve => setTimeout(resolve, 1000));
          }
          
          await Promise.all(
            pageGames.map((g) =>
              limit(async () => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø–æ–∏—Å–∫
                if (!isContinuousSearchRunning) {
                  return;
                }
                
                try {
                  const result = await upsertGameWithStatus({ source_id: g.source_id, title: g.title, url: g.url });
                  
                  if (result.isNew) {
                    newGames++;
                    letterNewGames++;
                    newGamesList.push({ title: g.title, url: g.url });
                    logger.info(`üéÆ New game found: ${g.title} (${g.url})`);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É –∂–µ
                    await sendSingleGameNotification({ title: g.title, url: g.url });
                  } else {
                    updatedGames++;
                  }
                } catch (e) {
                  errors++;
                  logger.warn({ source_id: g.source_id, err: (e as Error).message }, 'Failed to process game');
                }
              })
            )
          );
          page += 1;
        }
        
        logger.info(`‚úÖ Letter "${letter}" completed: ${letterGames} games processed, ${letterNewGames} new games found, ${page - 1} pages processed`);
        
      } catch (e) {
        errors++;
        logger.warn({ letter, err: (e as Error).message }, 'Failed to process letter');
      }
    }
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ –æ–¥–Ω–æ–π –∏–≥—Ä–µ
    
    logger.info(`üéØ Continuous search cycle completed! Total: ${totalGames}, New: ${newGames}, Updated: ${updatedGames}, Errors: ${errors}`);
    
  } catch (error) {
    logger.error({ error }, 'Error during continuous search');
  }
}

async function sendSingleGameNotification(game: {title: string, url: string}): Promise<void> {
  if (!botInstance) {
    return;
  }

  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
  const escapeMarkdown = (text: string): string => {
    return text.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');
  };

  const message = `üéÆ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞!\n\n[${escapeMarkdown(game.title)}](${game.url})`;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —á–∞—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–≥–¥–∞-–ª–∏–±–æ –ø–∏—Å–∞–ª–∏ –±–æ—Ç—É
  for (const chatId of allChatIds) {
    try {
      await botInstance.sendMessage(chatId, message, { 
        parse_mode: 'Markdown',
        disable_web_page_preview: false 
      });
    } catch (error) {
      // –ï—Å–ª–∏ Markdown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      try {
        const plainMessage = `üéÆ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞!\n\n${game.title}\n${game.url}`;
        
        await botInstance.sendMessage(chatId, plainMessage, { 
          disable_web_page_preview: false 
        });
      } catch (fallbackError) {
        logger.error({ error: fallbackError, chatId }, 'Failed to send single game notification even with fallback');
      }
    }
  }
}

async function sendNewGamesNotifications(newGames: Array<{title: string, url: string}>): Promise<void> {
  if (!botInstance || newGames.length === 0) {
    return;
  }

  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
  const escapeMarkdown = (text: string): string => {
    return text.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');
  };

  const message = `üéÆ –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –∏–≥—Ä—ã!\n\n${newGames.map((game, index) => 
    `${index + 1}. [${escapeMarkdown(game.title)}](${game.url})`
  ).join('\n')}`;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —á–∞—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–≥–¥–∞-–ª–∏–±–æ –ø–∏—Å–∞–ª–∏ –±–æ—Ç—É
  for (const chatId of allChatIds) {
    try {
      await botInstance.sendMessage(chatId, message, { 
        parse_mode: 'Markdown',
        disable_web_page_preview: false 
      });
    } catch (error) {
      // –ï—Å–ª–∏ Markdown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      try {
        const plainMessage = `üéÆ –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –∏–≥—Ä—ã!\n\n${newGames.map((game, index) => 
          `${index + 1}. ${game.title}\n${game.url}`
        ).join('\n\n')}`;
        
        await botInstance.sendMessage(chatId, plainMessage, { 
          disable_web_page_preview: false 
        });
      } catch (fallbackError) {
        logger.error({ error: fallbackError, chatId }, 'Failed to send notification even with fallback');
      }
    }
  }
}

// Graceful shutdown
export function cleanup(): void {
  stopContinuousSearch();
}
