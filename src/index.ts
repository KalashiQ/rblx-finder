import TelegramBot from 'node-telegram-bot-api';
import { config } from './config';
import { initSchema, getGameCount, getGames, searchGames, getDatabaseStats, clearAllGames, exportDatabaseToFile, exportGamesToJsonFile, exportGamesToCsvFile, removeDuplicateGames, checkDuplicates } from './db';
import { parseNewGames, setProgressCallback, ProgressInfo } from './populate';
import { initBrowser, closeBrowser } from './browser';
import { isParsing, setParsingState, resetParsingState } from './parsing-state';
import { 
  setBotInstance, 
  addChatId, 
  isContinuousSearchActive, 
  startContinuousSearch, 
  stopContinuousSearch,
  cleanup as cleanupContinuousSearch 
} from './continuous-search';
import pino from 'pino';

const logger = pino({ 
  level: 'info',
  transport: {
    target: 'pino-pretty',
    options: {
      colorize: true,
      translateTime: 'HH:MM:ss',
      ignore: 'pid,hostname'
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function isUserAllowed(userId: number): boolean {
  // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç, –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö
  if (config.ALLOWED_USER_IDS.length === 0) {
    return true;
  }
  
  return config.ALLOWED_USER_IDS.includes(userId);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
if (!config.BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  console.log('–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(config.BOT_TOKEN, { polling: true });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
initSchema();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –¥–ª—è –º–æ–¥—É–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
setBotInstance(bot);

console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
console.log('üí° –ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ –æ—à–∏–±–∫—É 409 Conflict, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞');

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
const mainKeyboard = {
  reply_markup: {
    keyboard: [
      [
        { text: 'üéÆ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∏–≥—Ä' },
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã' }
      ],
      [
        { text: 'üîÑ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–æ–∏—Å–∫' }
      ],
      [
        { text: '‚ùì –ü–æ–º–æ—â—å' }
      ]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from?.id;
  const firstName = msg.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  if (userId && !isUserAllowed(userId)) {
    bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.');
    return;
  }
  
  bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã\n\n–Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–≥—Ä —Å rotrends.com!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, mainKeyboard);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from?.id;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  if (userId && !isUserAllowed(userId)) {
    bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.');
    return;
  }
  
  bot.sendMessage(chatId, `üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.`, mainKeyboard);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping
bot.onText(/\/ping/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from?.id;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  if (userId && !isUserAllowed(userId)) {
    bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.');
    return;
  }
  
  bot.sendMessage(chatId, 'üèì Pong! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from?.id;
  const text = msg.text;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  if (userId && !isUserAllowed(userId)) {
    bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.');
    return;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º chatId –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  addChatId(chatId);
  
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—ã—à–µ)
  if (text && text.startsWith('/')) {
    return;
  }
  
  if (!text) return;
  
  try {
    switch (text) {
      case 'üéÆ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∏–≥—Ä':
        await handleParseGames(chatId);
        break;
        
      case 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã':
        await handleStats(chatId);
        break;
        
      case '‚ùì –ü–æ–º–æ—â—å':
        await handleHelp(chatId);
        break;
        
      case 'üîÑ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–æ–∏—Å–∫':
        await handleStartContinuousSearch(chatId);
        break;
        
      case '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥':
        await handleCancelParsing(chatId);
        break;
        
      default:
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ –∫–Ω–æ–ø–∫–∞
        bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.', mainKeyboard);
    }
  } catch (error) {
    logger.error({ error, chatId }, 'Error handling message');
    bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ (inline –∫–Ω–æ–ø–∫–∏)
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message?.chat.id;
  const messageId = callbackQuery.message?.message_id;
  const data = callbackQuery.data;
  const userId = callbackQuery.from?.id;
  
  if (!chatId || !data) return;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  if (userId && !isUserAllowed(userId)) {
    await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    return;
  }
  
  try {
    if (data === 'cancel_parsing') {
      if (isParsing) {
        console.log('üõë –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã
        resetParsingState();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.editMessageText('‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.', {
          chat_id: chatId,
          message_id: messageId
        });
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        await closeBrowser();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await bot.sendMessage(chatId, '–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainKeyboard);
      } else {
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' });
      }
    } else if (data === 'stop_continuous_search') {
      if (isContinuousSearchActive()) {
        stopContinuousSearch();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.editMessageText('‚èπÔ∏è –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!', {
          chat_id: chatId,
          message_id: messageId
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await bot.sendMessage(chatId, '–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainKeyboard);
      } else {
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' });
      }
    } else if (data === 'clear_database') {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏
      const confirmKeyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å', callback_data: 'confirm_clear_database' },
              { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_clear_database' }
            ]
          ]
        }
      };
      
      await bot.editMessageText('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ —É–¥–∞–ª–∏—Ç –í–°–ï –∏–≥—Ä—ã –∏–∑ –±–∞–∑—ã!', {
        chat_id: chatId,
        message_id: messageId,
        ...confirmKeyboard
      });
    } else if (data === 'confirm_clear_database') {
      try {
        await clearAllGames();
        
        await bot.editMessageText('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!\n\n–í—Å–µ –∏–≥—Ä—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã.', {
          chat_id: chatId,
          message_id: messageId
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await bot.sendMessage(chatId, '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainKeyboard);
      } catch (error) {
        logger.error({ error, chatId }, 'Error clearing database');
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.', {
          chat_id: chatId,
          message_id: messageId
        });
      }
    } else if (data === 'cancel_clear_database') {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
      await handleStats(chatId, messageId);
    } else if (data === 'refresh_stats') {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await handleStats(chatId, messageId);
    } else if (data === 'check_duplicates') {
      try {
        const duplicateInfo = await checkDuplicates();
        
        let message = `üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:\n\n`;
        message += `üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${duplicateInfo.total}\n`;
        message += `üîÑ –î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicateInfo.duplicates}\n`;
        message += `‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${duplicateInfo.total - duplicateInfo.duplicates}\n\n`;
        
        if (duplicateInfo.duplicates > 0) {
          message += `‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üßπ –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã" –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.`;
        } else {
          message += `‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`;
        }
        
        await bot.editMessageText(message, {
          chat_id: chatId,
          message_id: messageId
        });
        
        await bot.answerCallbackQuery(callbackQuery.id, { 
          text: duplicateInfo.duplicates > 0 ? `‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${duplicateInfo.duplicates} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤` : '‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        });
      } catch (error) {
        logger.error({ error, chatId }, 'Error checking duplicates');
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.', {
          chat_id: chatId,
          message_id: messageId
        });
        await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤' });
      }
    } else if (data === 'remove_duplicates') {
      try {
        const removedCount = await removeDuplicateGames();
        
        await bot.editMessageText(`‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã!\n\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${removedCount}\n\n–û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...`, {
          chat_id: chatId,
          message_id: messageId
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        setTimeout(async () => {
          await handleStats(chatId, messageId);
        }, 1000);
        
        await bot.answerCallbackQuery(callbackQuery.id, { text: `‚úÖ –£–¥–∞–ª–µ–Ω–æ ${removedCount} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤` });
      } catch (error) {
        logger.error({ error, chatId }, 'Error removing duplicates');
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.', {
          chat_id: chatId,
          message_id: messageId
        });
        await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤' });
      }
    } else if (data === 'export_db') {
      try {
        const filePath = await exportDatabaseToFile();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        await bot.sendDocument(chatId, filePath, {
          caption: `üóÑÔ∏è –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ SQLite\n\nüìÖ –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}\n\nüí° –≠—Ç–æ—Ç —Ñ–∞–π–ª –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤ –ª—é–±–æ–º SQLite –±—Ä–∞—É–∑–µ—Ä–µ`
        });
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        setTimeout(() => {
          require('fs').unlink(filePath, (err: any) => {
            if (err) logger.error({ error: err, filePath }, 'Error deleting temp file');
          });
        }, 5000);
        
        await bot.answerCallbackQuery(callbackQuery.id, { text: '‚úÖ .db —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' });
      } catch (error) {
        logger.error({ error, chatId }, 'Error exporting database');
        await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ .db —Ñ–∞–π–ª–∞' });
      }
    } else if (data === 'export_json') {
      try {
        const filePath = await exportGamesToJsonFile();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        await bot.sendDocument(chatId, filePath, {
          caption: `üì§ –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ JSON\n\nüìÖ –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}`
        });
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        setTimeout(() => {
          require('fs').unlink(filePath, (err: any) => {
            if (err) logger.error({ error: err, filePath }, 'Error deleting temp file');
          });
        }, 5000);
        
        await bot.answerCallbackQuery(callbackQuery.id, { text: '‚úÖ JSON —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' });
      } catch (error) {
        logger.error({ error, chatId }, 'Error exporting JSON');
        await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ JSON' });
      }
    } else if (data === 'export_csv') {
      try {
        const filePath = await exportGamesToCsvFile();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        await bot.sendDocument(chatId, filePath, {
          caption: `üìä –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ CSV\n\nüìÖ –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}`
        });
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        setTimeout(() => {
          require('fs').unlink(filePath, (err: any) => {
            if (err) logger.error({ error: err, filePath }, 'Error deleting temp file');
          });
        }, 5000);
        
        await bot.answerCallbackQuery(callbackQuery.id, { text: '‚úÖ CSV —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' });
      } catch (error) {
        logger.error({ error, chatId }, 'Error exporting CSV');
        await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ CSV' });
      }
    }
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
    await bot.answerCallbackQuery(callbackQuery.id);
  } catch (error) {
    logger.error({ error, chatId, data }, 'Error handling callback query');
    await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
  }
});

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–≥—Ä
async function handleParseGames(chatId: number) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –ø–∞—Ä—Å–∏–Ω–≥
    if (isParsing) {
      await bot.sendMessage(chatId, '‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.', mainKeyboard);
      return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–∞—Ä—Å–∏–Ω–≥–∞
    setParsingState(true, chatId);
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    const cancelKeyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥', callback_data: 'cancel_parsing' }]
        ]
      }
    };
    
    const parsingMessage = await bot.sendMessage(chatId, 'üöÄ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –∏–≥—Ä —Å rotrends.com...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.', cancelKeyboard);
    setParsingState(true, chatId, parsingMessage.message_id);
    
    console.log('üöÄ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω');
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    setProgressCallback(async (progress: ProgressInfo) => {
      try {
        const progressText = progress.isComplete 
          ? `‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${progress.totalGames}\n‚Ä¢ –ù–æ–≤—ã—Ö –∏–≥—Ä: ${progress.newGames}\n‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${progress.updatedGames}\n‚Ä¢ –û—à–∏–±–æ–∫: ${progress.errors}`
          : `üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n\nüìù –ë—É–∫–≤–∞: "${progress.currentLetter}" (${progress.letterIndex}/${progress.totalLetters})\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${progress.currentPage}\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–≥—Ä: ${progress.totalGames}\n‚Ä¢ –ù–æ–≤—ã—Ö –∏–≥—Ä: ${progress.newGames}\n‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${progress.updatedGames}\n‚Ä¢ –û—à–∏–±–æ–∫: ${progress.errors}\n\nüïê ${new Date().toLocaleTimeString('ru-RU')}`;
        
        await bot.editMessageText(progressText, {
          chat_id: chatId,
          message_id: parsingMessage.message_id,
          reply_markup: progress.isComplete ? undefined : cancelKeyboard.reply_markup
        });
      } catch (error: any) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "message is not modified"
        if (error.message?.includes('message is not modified')) {
          logger.debug({ chatId }, 'Progress message not modified, skipping update');
        } else {
          logger.error({ error, chatId }, 'Error updating progress message');
        }
      }
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
    await initBrowser();
    
    const result = await parseNewGames();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
    resetParsingState();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    const finalMessage = `‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.totalGames}\n‚Ä¢ –ù–æ–≤—ã—Ö –∏–≥—Ä: ${result.newGames}\n‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${result.updatedGames}\n‚Ä¢ –û—à–∏–±–æ–∫: ${result.errors}\n‚Ä¢ –í—Å–µ–≥–æ –≤ –±–∞–∑–µ: ${result.realGameCount}`;
    
    await bot.sendMessage(chatId, finalMessage, mainKeyboard);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    await closeBrowser();
  } catch (error) {
    logger.error({ error, chatId }, 'Error parsing games');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    resetParsingState();
    
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏–≥—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', mainKeyboard);
    await closeBrowser();
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function handleStats(chatId: number, messageId?: number) {
  try {
    const stats = await getDatabaseStats();
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    const formatDate = (dateStr: string | null) => {
      if (!dateStr) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      const date = new Date(dateStr);
      return date.toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    };
    
    const message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n\n` +
      `üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: ${stats.totalGames}\n` +
      `üíæ –†–∞–∑–º–µ—Ä –ë–î: ${stats.databaseSize}\n` +
      `üìÖ –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∏–≥—Ä–∞: ${formatDate(stats.oldestGame)}\n` +
      `üìÖ –°–∞–º–∞—è –Ω–æ–≤–∞—è –∏–≥—Ä–∞: ${formatDate(stats.newestGame)}\n\n` +
      `üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleTimeString('ru-RU')}`;
    
    // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    const statsKeyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üóÑÔ∏è –≠–∫—Å–ø–æ—Ä—Ç .db', callback_data: 'export_db' },
            { text: 'üì§ –≠–∫—Å–ø–æ—Ä—Ç JSON', callback_data: 'export_json' }
          ],
          [
            { text: 'üìä –≠–∫—Å–ø–æ—Ä—Ç CSV', callback_data: 'export_csv' }
          ],
          [
            { text: 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã', callback_data: 'check_duplicates' },
            { text: 'üßπ –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã', callback_data: 'remove_duplicates' }
          ],
          [
            { text: 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –ë–î', callback_data: 'clear_database' }
          ],
          [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data: 'refresh_stats' }]
        ]
      }
    };
    
    if (messageId) {
      // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      try {
        await bot.editMessageText(message, {
          chat_id: chatId,
          message_id: messageId,
          ...statsKeyboard
        });
      } catch (editError: any) {
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        if (editError.message?.includes('message is not modified')) {
          logger.debug({ chatId, messageId }, 'Message not modified, skipping edit');
        } else {
          throw editError;
        }
      }
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.sendMessage(chatId, message, statsKeyboard);
    }
  } catch (error) {
    logger.error({ error, chatId }, 'Error getting stats');
    if (messageId) {
      await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.', {
        chat_id: chatId,
        message_id: messageId
      });
    } else {
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.', mainKeyboard);
    }
  }
}


// –§—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏
async function handleHelp(chatId: number) {
  const message = `‚ùì –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\nüéÆ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∏–≥—Ä - –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∏–≥—Ä —Å rotrends.com\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –≤ –±–∞–∑–µ\nüîÑ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–æ–∏—Å–∫ - –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –∏–≥—Ä –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∏–≥—Ä–∞—Ö –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!\n\n‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ.`;
  
  await bot.sendMessage(chatId, message, mainKeyboard);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
async function handleCancelParsing(chatId: number) {
  if (isParsing) {
    console.log('üõë –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É');
    resetParsingState();
    await closeBrowser();
    await bot.sendMessage(chatId, '‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainKeyboard);
  } else {
    await bot.sendMessage(chatId, '‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.', mainKeyboard);
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
async function handleStartContinuousSearch(chatId: number) {
  try {
    if (isContinuousSearchActive()) {
      await bot.sendMessage(chatId, 'üîÑ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–æ–∏—Å–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!', mainKeyboard);
      return;
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    await new Promise(resolve => setTimeout(resolve, 100));
    
    if (isContinuousSearchActive()) {
      await bot.sendMessage(chatId, 'üîÑ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–æ–∏—Å–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!', mainKeyboard);
      return;
    }
    
    startContinuousSearch();
    
    // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    const stopKeyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫', callback_data: 'stop_continuous_search' }]
        ]
      }
    };
    
    await bot.sendMessage(chatId, 'üöÄ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω! –ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ –∏–≥—Ä—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.', stopKeyboard);
  } catch (error) {
    logger.error({ error, chatId }, 'Error starting continuous search');
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.', mainKeyboard);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
async function handleStopContinuousSearch(chatId: number) {
  try {
    if (!isContinuousSearchActive()) {
      await bot.sendMessage(chatId, '‚èπÔ∏è –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω!', mainKeyboard);
      return;
    }
    
    stopContinuousSearch();
    await bot.sendMessage(chatId, '‚èπÔ∏è –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!', mainKeyboard);
  } catch (error) {
    logger.error({ error, chatId }, 'Error stopping continuous search');
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.', mainKeyboard);
  }
}


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error: any) => {
  if (error.code === 'ETELEGRAM' && error.response?.body?.error_code === 409) {
    console.error('‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç: —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞!');
    console.error('üí° –†–µ—à–µ–Ω–∏–µ: –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥');
    console.error('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π polling
    bot.stopPolling();
    
    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API...');
      bot.startPolling();
    }, 10000);
  } else if (error.code === 'EFATAL' || error.message?.includes('ECONNRESET')) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API');
    console.error('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...');
    
    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    setTimeout(() => {
      console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API...');
      bot.startPolling();
    }, 5000);
  } else {
    console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error);
  }
});

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  bot.stopPolling();
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
  resetParsingState();
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–æ–∏—Å–∫
  cleanupContinuousSearch();
  
  await closeBrowser();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  bot.stopPolling();
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
  resetParsingState();
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–æ–∏—Å–∫
  cleanupContinuousSearch();
  
  await closeBrowser();
  process.exit(0);
});
