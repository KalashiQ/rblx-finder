import pLimit from 'p-limit';
import pino from 'pino';
import { config } from './config';
import { initSchema, upsertGame, upsertGameWithStatus, getGameCount } from './db';
import { fetchGamesByLetter, fetchGamesByLetterPage } from './rotrends';
import { closeBrowser } from './browser';
import { isParsing } from './parsing-state';
import TelegramBot from 'node-telegram-bot-api';

const logger = pino({ 
  level: 'warn',
  transport: {
    target: 'pino-pretty',
    options: {
      colorize: true,
      translateTime: 'HH:MM:ss',
      ignore: 'pid,hostname'
    }
  }
});

// –¢–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä—É—Å—Å–∫–∏—Ö –∏–≥—Ä
const LETTERS = [
  '–∞','–±','–≤','–≥','–¥','–µ','–∂','–∑','–∏','–π','–∫','–ª','–º','–Ω','–æ','–ø','—Ä','—Å','—Ç','—É','—Ñ','—Ö','—Ü','—á','—à','—â','—ä','—ã','—å','—ç','—é','—è'
];

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
let progressCallback: ((progress: ProgressInfo) => void) | null = null;

export interface ProgressInfo {
  currentLetter: string;
  letterIndex: number;
  totalLetters: number;
  currentPage: number;
  totalGames: number;
  newGames: number;
  updatedGames: number;
  errors: number;
  isComplete: boolean;
}

export function setProgressCallback(callback: (progress: ProgressInfo) => void) {
  progressCallback = callback;
}

function updateProgress(progress: ProgressInfo) {
  if (progressCallback) {
    progressCallback(progress);
  }
}

export async function populateByLetters(): Promise<void> {
  const limit = pLimit(config.CONCURRENCY);
  for (const letter of LETTERS) {
    try {
      // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      let page = 1;
      let emptyPagesCount = 0;
      const maxEmptyPages = 3; // –ú–∞–∫—Å–∏–º—É–º 3 –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥—Ä—è–¥
      
      for (;;) {
        logger.info({ letter, page }, 'üìÑ Processing page for letter');
        const pageGames = page === 1 ? await fetchGamesByLetter(letter) : await fetchGamesByLetterPage(letter, page, 100); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        logger.info({ letter, page, count: pageGames.length }, '‚úÖ Fetched games by letter/page');
        
        if (!pageGames.length) {
          emptyPagesCount++;
          logger.warn({ letter, page, emptyPagesCount, maxEmptyPages }, '‚ö†Ô∏è Empty page detected');
          
          if (emptyPagesCount >= maxEmptyPages) {
            logger.info({ letter }, 'üõë Stopping pagination after empty pages');
            break;
          }
          
          page++;
          continue;
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ
        emptyPagesCount = 0;
        await Promise.all(
          pageGames.map((g) =>
            limit(async () => {
              const gameId = await upsertGame({ source_id: g.source_id, title: g.title, url: g.url });
              logger.debug({ gameId, source_id: g.source_id }, 'Upserted game');
            })
          )
        );
        page += 1;
      }
    } catch (e) {
      logger.warn({ letter, err: (e as Error).message }, 'Failed to process letter');
    }
  }
}

export async function populate(): Promise<void> {
  initSchema();
  await populateByLetters();
}

export async function parseNewGames(): Promise<{
  totalGames: number;
  newGames: number;
  updatedGames: number;
  errors: number;
  realGameCount: number;
}> {
  initSchema();
  
  let totalGames = 0;
  let newGames = 0;
  let updatedGames = 0;
  let errors = 0;
  
  const limit = pLimit(config.CONCURRENCY);
  
  // –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ –±—É–∫–≤–∞–º
  for (let i = 0; i < LETTERS.length; i++) {
    const letter = LETTERS[i];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –±—É–∫–≤–æ–π
    if (!isParsing) {
      console.log('üõë –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
      break;
    }
    
    console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±—É–∫–≤—É "${letter}" (${i + 1}/${LETTERS.length})`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    updateProgress({
      currentLetter: letter,
      letterIndex: i + 1,
      totalLetters: LETTERS.length,
      currentPage: 1,
      totalGames,
      newGames,
      updatedGames,
      errors,
      isComplete: false
    });
    
    try {
      let page = 1;
      let emptyPagesCount = 0;
      const maxEmptyPages = 3; // –ú–∞–∫—Å–∏–º—É–º 3 –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥—Ä—è–¥
      const processedPages = new Set<number>(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      
      for (;;) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        if (!isParsing) {
          console.log('üõë –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
          break;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if (processedPages.has(page)) {
          console.log(`‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –¥–ª—è –±—É–∫–≤—ã "${letter}" —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          page++;
          continue;
        }
        
        console.log(`üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page} –¥–ª—è –±—É–∫–≤—ã "${letter}"`);
        
        // –û—Ç–º–µ—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
        processedPages.add(page);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        updateProgress({
          currentLetter: letter,
          letterIndex: i + 1,
          totalLetters: LETTERS.length,
          currentPage: page,
          totalGames,
          newGames,
          updatedGames,
          errors,
          isComplete: false
        });
        
        let pageGames: any[] = [];
        try {
          pageGames = page === 1 ? await fetchGamesByLetter(letter, 100) : await fetchGamesByLetterPage(letter, page, 100);
          console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –¥–ª—è –±—É–∫–≤—ã "${letter}": –Ω–∞–π–¥–µ–Ω–æ ${pageGames.length} –∏–≥—Ä`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page} –¥–ª—è –±—É–∫–≤—ã "${letter}":`, (error as Error).message);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º
          pageGames = [];
        }
        
        if (!pageGames.length) {
          emptyPagesCount++;
          console.log(`‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –¥–ª—è –±—É–∫–≤—ã "${letter}" (${emptyPagesCount}/${maxEmptyPages})`);
          
          if (emptyPagesCount >= maxEmptyPages) {
            console.log(`üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –±—É–∫–≤—ã "${letter}" –ø–æ—Å–ª–µ ${maxEmptyPages} –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü`);
            break;
          }
          
          page++;
          continue;
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ
        emptyPagesCount = 0;
        
        totalGames += pageGames.length;
        
        const processedGames = await Promise.all(
          pageGames.map((g) =>
            limit(async () => {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
              if (!isParsing) {
                return null;
              }
              
              try {
                const result = await upsertGameWithStatus({ source_id: g.source_id, title: g.title, url: g.url });
                
                // –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
                if (result.isNew) {
                  newGames++;
                } else {
                  updatedGames++;
                }
                return result;
              } catch (e) {
                errors++;
                logger.warn({ source_id: g.source_id, err: (e as Error).message }, 'Failed to process game');
                return null;
              }
            })
          )
        );
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
        const successfulGames = processedGames.filter(g => g !== null).length;
        const failedGames = pageGames.length - successfulGames;
        
        console.log(`üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –¥–ª—è –±—É–∫–≤—ã "${letter}": ${pageGames.length} –Ω–∞–π–¥–µ–Ω–æ, ${successfulGames} –∑–∞–ø–∏—Å–∞–Ω–æ, ${failedGames} –æ—à–∏–±–æ–∫`);
        
        if (failedGames > 0) {
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}: ${failedGames} –∏–≥—Ä –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å`);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä
        updateProgress({
          currentLetter: letter,
          letterIndex: i + 1,
          totalLetters: LETTERS.length,
          currentPage: page,
          totalGames,
          newGames,
          updatedGames,
          errors,
          isComplete: false
        });
        
        page += 1;
      }
    } catch (e) {
      errors++;
      logger.warn({ letter, err: (e as Error).message }, 'Failed to process letter');
    }
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const realGameCount = await getGameCount();
  
  // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  updateProgress({
    currentLetter: '',
    letterIndex: LETTERS.length,
    totalLetters: LETTERS.length,
    currentPage: 0,
    totalGames,
    newGames,
    updatedGames,
    errors,
    isComplete: true
  });
  
  console.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalGames}, –Ω–æ–≤—ã—Ö: ${newGames}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedGames}, –æ—à–∏–±–æ–∫: ${errors}`);
  
  return {
    totalGames,
    newGames,
    updatedGames,
    errors,
    realGameCount
  };
}

if (require.main === module) {
  populate()
    .then(() => {
      logger.info('Populate completed');
      return closeBrowser();
    })
    .catch((err) => {
      // eslint-disable-next-line no-console
      console.error(err);
      process.exit(1);
    });
}