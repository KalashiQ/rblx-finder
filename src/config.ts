import dotenv from 'dotenv';

dotenv.config();

// –ü–∞—Ä—Å–∏–º ALLOWED_USER_IDS —Å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
const parseAllowedUserIds = (): number[] => {
  const rawIds = process.env.ALLOWED_USER_IDS;
  if (!rawIds || rawIds.trim() === '') {
    console.log('üîì ALLOWED_USER_IDS –Ω–µ –∑–∞–¥–∞–Ω - –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    return [];
  }
  
  try {
    const ids = rawIds.split(',').map(id => {
      const trimmed = id.trim();
      const parsed = parseInt(trimmed);
      if (isNaN(parsed)) {
        console.warn(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${trimmed}"`);
        return null;
      }
      return parsed;
    }).filter(id => id !== null) as number[];
    
    console.log(`üîí ALLOWED_USER_IDS –∑–∞–≥—Ä—É–∂–µ–Ω: [${ids.join(', ')}]`);
    return ids;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ALLOWED_USER_IDS:', error);
    return [];
  }
};

export const config = {
  BOT_TOKEN: process.env.BOT_TOKEN || '',
  LOG_LEVEL: process.env.LOG_LEVEL || 'info',
  CONCURRENCY: parseInt(process.env.CONCURRENCY || '3'),
  DATABASE_PATH: process.env.DATABASE_PATH || './games.db',
  NODE_ENV: process.env.NODE_ENV || 'development',
  ALLOWED_USER_IDS: parseAllowedUserIds(),
};
